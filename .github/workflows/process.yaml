name: Process
on:
  workflow_dispatch:
  schedule:
    - cron: "05 03 * * *"
    - cron: "05 11 * * *"

env:
  # 产物文件相对路径（如果不是根目录，请改成真实路径，例如 build/clash.yaml）
  OUTPUT_FILE: clash.yaml

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      - name: Validate secrets (non-empty)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}   # 可填 ID 或完整 URL
          GIST_PAT:  ${{ secrets.GIST_PAT }}    # 需要 Gists: Read & write
        run: |
          set -eux
          test -n "$GIST_LINK" || (echo "GIST_LINK is empty"; exit 1)
          test -n "$GIST_PAT"  || (echo "GIST_PAT is empty";  exit 1)

      - name: Build runtime config.json (inject push->gist)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
          OUTPUT_FILE: ${{ env.OUTPUT_FILE }}
        run: |
          set -eux
          test -f subscribe/config/config.default.json

          # 生成注入脚本（务必保持下面行首无额外空格/中文字符）
          cat > inject.py <<'PY'
import json, os

# 读取默认配置
with open('subscribe/config/config.default.json','r',encoding='utf-8') as f:
    cfg = json.load(f)

# 解析 Gist ID：支持 ID 或完整 URL
raw = os.environ['GIST_LINK'].strip()
gid = raw.rstrip('/').split('/')[-1] if raw.startswith('http') else raw

# 注入 storage -> gist
cfg.setdefault('storage', {})
cfg['storage']['engine']  = 'gist'
cfg['storage']['base']    = 'https://api.github.com'
cfg['storage']['domain']  = 'https://gist.github.com'
cfg['storage']['token']   = os.environ['GIST_PAT']
cfg['storage']['items']   = {
    "xxx-clash": {"id": gid, "filename": os.environ['OUTPUT_FILE']}
}

# 写回运行时配置
with open('config.json','w',encoding='utf-8') as f:
    json.dump(cfg, f, ensure_ascii=False, indent=2)

# 打码展示
cfg['storage']['token'] = '***'
print("=== RESOLVED config.json ===")
print(json.dumps(cfg, ensure_ascii=False, indent=2))
PY

          python inject.py
          rm -f inject.py

      - name: Process
        env:
          SUBSCRIBE_CONF: config.json
        run: |
          set -eux
          python -u subscribe/process.py -c --overwrite

      - name: Verify output exists
        env:
          OUTPUT_FILE: ${{ env.OUTPUT_FILE }}
        run: |
          set -eux
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "ERROR: Output file not found: $OUTPUT_FILE"
            echo "If your script writes to another path, edit env.OUTPUT_FILE at top of this workflow."
            exit 1
          fi
          echo "Found: $OUTPUT_FILE"
          ls -al "$OUTPUT_FILE"

      - name: Timestamp
        run: date
