name: run-process
on:
  workflow_dispatch: {}   # 手动触发

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        run: pip install -r requirements.txt

      # 准备配置：按默认模板复制一份
      - name: Prepare config
        run: |
          mkdir -p subscribe/config
          cp subscribe/config/config.default.json subscribe/config/config.json

      # 关键：该仓库的 -c 是布尔开关，不能跟路径；先尝试带 -c，不行就退回
      - name: Run process
        shell: bash
        run: |
          set -eux
          python subscribe/process.py -c || python subscribe/process.py

      # 打印下目录，便于你核对
      - name: Inspect outputs
        shell: bash
        run: |
          echo "WORKSPACE=$(pwd)"
          ls -lah || true
          ls -lah subscribe || true
          ls -lah subscribe/out || true
          ls -lah clash || true

      # 自动定位一个最合适的 YAML 结果文件
      - name: Locate YAML output
        id: locate
        shell: bash
        run: |
          set -e
          pick=""
          # 优先常见路径
          for p in clash/proxies.yaml proxies.yaml subscribe/out/clash.yaml subscribe/out/proxies.yaml; do
            if [ -f "$p" ]; then pick="$p"; break; fi
          done
          # 其次挑最新的 .yaml/.yml
          if [ -z "$pick" ]; then
            pick=$(find . -type f \( -name "*.yaml" -o -name "*.yml" \) -printf "%T@ %p\n" | sort -nr | head -n 1 | cut -d' ' -f2- || true)
          fi
          # 去掉前缀 ./ 以便后续读文件
          if [ -n "$pick" ]; then pick="${pick#./}"; fi
          echo "file=$pick" >> "$GITHUB_OUTPUT"
          echo "Picked file: ${pick:-<none>}"

      # 用官方 Action 调 API，把定位到的文件内容写到你的 Gist 中（文件名统一叫 clash.yaml）
      - name: Update Gist via GitHub API
        if: ${{ steps.locate.outputs.file != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIST_PAT }}   # 你已有的 PAT（需 gist 权限）
          script: |
            const fs = require('fs');
            const p = '${{ steps.locate.outputs.file }}';
            const content = fs.readFileSync(p, 'utf8');
            await github.request('PATCH /gists/{gist_id}', {
              gist_id: process.env.GIST_ID,
              files: { 'clash.yaml': { content } }   // Gist 里的文件名
            });
        env:
          GIST_ID: ${{ secrets.GIST_LINK }}       # 你已有的 Gist ID（不是整条 URL）

      # 把所有 YAML 结果一并打包，方便你直接下载
      - name: Upload artifacts (all YAML)
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: |
            **/*.yaml
            **/*.yml
            subscribe/out/**
          if-no-files-found: warn
