name: Process
on:
  workflow_dispatch:
  schedule:
    - cron: "05 03 * * *"
    - cron: "05 11 * * *"

env:
  # 产物文件相对路径：如不在根目录，请改这里
  OUTPUT_FILE: clash.yaml

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      # 1) 自检：Secrets 非空
      - name: Validate secrets (non-empty)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}   # 建议用 Gist 的 ID；也支持整条 URL（下步会提取）
          GIST_PAT:  ${{ secrets.GIST_PAT }}    # 必须有 Gists: Read & write
        run: |
          set -eux
          test -n "$GIST_LINK" || (echo "GIST_LINK is empty"; exit 1)
          test -n "$GIST_PAT"  || (echo "GIST_PAT is empty";  exit 1)

      # 2) 自检：PAT 能访问该 Gist（自动从 URL 抽出 ID）
      - name: Check PAT can access Gist
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
        run: |
          set -eux
          RAW="$GIST_LINK"
          if echo "$RAW" | grep -qi '^http'; then
            GID="$(echo "$RAW" | sed 's#/*$##' | awk -F/ '{print $NF}')"
          else
            GID="$RAW"
          fi
          echo "Resolved GIST ID: $GID"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GIST_PAT" "https://api.github.com/gists/$GID")
          echo "HTTP $CODE"
          [ "$CODE" = "200" ] || (echo "PAT/GIST_LINK check failed"; exit 1)

      # 3) 复制默认配置并注入 Gist 推送
      - name: Build runtime config.json (inject push->gist)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
          OUTPUT_FILE: ${{ env.OUTPUT_FILE }}
        run: |
          set -eux
          test -f subscribe/config/config.default.json

          cat > inject.py <<'PY'
import json, os

# 读取默认配置
with open('subscribe/config/config.default.json','r',encoding='utf-8') as f:
    cfg = json.load(f)

raw = os.environ['GIST_LINK'].strip()
gid = raw.rstrip('/').split('/')[-1] if raw.startswith('http') else raw

# 注入 storage -> gist
cfg.setdefault('storage', {})
cfg['storage']['engine']  = 'gist'
cfg['storage']['base']    = 'https://api.github.com'
cfg['storage']['domain']  = 'https://gist.github.com'
cfg['storage']['token']   = os.environ['GIST_PAT']
cfg['storage']['items']   = {
    "xxx-clash": {"id": gid, "filename": os.environ['OUTPUT_FILE']}
}

with open('config.json','w',encoding='utf-8') as f:
    json.dump(cfg, f, ensure_ascii=False, indent=2)

cfg['storage']['token'] = '***'   # 打码
print("=== RESOLVED config.json ===")
print(json.dumps(cfg, ensure_ascii=False, indent=2))
PY

          python inject.py
          rm -f inject.py

      # 4) 跑脚本（使用 SUBSCRIBE_CONF + -c）
      - name: Process
        env:
          SUBSCRIBE_CONF: config.json
        run: |
          set -eux
          python -u subscribe/process.py -c --overwrite

      # 5) 断言产物存在；否则给出明确提示
      - name: Verify output exists
        env:
          OUTPUT_FILE: ${{ env.OUTPUT_FILE }}
        run: |
          set -eux
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "ERROR: Output file not found: $OUTPUT_FILE"
            echo "If your script writes to another path, edit env.OUTPUT_FILE in this workflow"
            exit 1
          fi
          echo "Found: $OUTPUT_FILE"
          ls -al "$OUTPUT_FILE"

      - name: Timestamp
        run: date
