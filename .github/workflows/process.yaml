name: Process
on:
  schedule:
    - cron: "05 03 * * *"
    - cron: "05 11 * * *"
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  # 你自己仓库里已有的环境变量保留
  SUBSCRIBE_CONF: ${{ secrets.SUBSCRIBE_CONF }}
  PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
  REACHABLE: ${{ vars.REACHABLE }}
  SKIP_ALIVE_CHECK: ${{ vars.SKIP_ALIVE_CHECK }}
  SKIP_REMARK: ${{ vars.SKIP_REMARK }}
  WORKFLOW_MODE: ${{ vars.WORKFLOW_MODE }}
  ENABLE_SPECIAL_PROTOCOLS: ${{ vars.ENABLE_SPECIAL_PROTOCOLS }}

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      # ====== 自检：Secrets 存在 ======
      - name: Validate secrets (non-empty)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}   # 必须是 Gist 的 ID（不是 URL）
          GIST_PAT:  ${{ secrets.GIST_PAT }}    # 需要 Gists: Read & write
        run: |
          set -eux
          test -n "$GIST_LINK" || (echo "GIST_LINK is empty"; exit 1)
          test -n "$GIST_PAT"  || (echo "GIST_PAT is empty";  exit 1)
          echo "GIST_LINK length: ${#GIST_LINK}"
          echo "GIST_PAT   length: ${#GIST_PAT}"

      # ====== 自检：PAT 能访问该 Gist（要求 GIST_LINK=ID）======
      - name: Check PAT can access Gist
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
        run: |
          set -eux
          code=$(curl -s -o /dev/null -w "%{http_code}\n" \
            -H "Authorization: token $GIST_PAT" \
            "https://api.github.com/gists/$GIST_LINK")
          echo "HTTP $code"
          [ "$code" = "200" ] || (echo "PAT/GIST_LINK check failed"; exit 1)

      # ====== 生成运行时 config.json，注入 Gist 推送配置 ======
      - name: Build runtime config.json (inject push->gist)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
        run: |
          set -eux
          test -f subscribe/config/config.default.json
          python - <<'PY'
import json, os
with open('subscribe/config/config.default.json','r',encoding='utf-8') as f:
    cfg = json.load(f)

# 注入 storage -> gist；产物在根目录，文件名为 clash.yaml
cfg.setdefault('storage', {})
cfg['storage']['engine'] = 'gist'
cfg['storage']['base']   = 'https://api.github.com'
cfg['storage']['domain'] = 'https://gist.github.com'
cfg['storage']['token']  = os.environ['GIST_PAT']
cfg['storage']['items']  = {
    "xxx-clash": {"id": os.environ['GIST_LINK'], "filename": "clash.yaml"}
}

with open('config.json','w',encoding='utf-8') as f:
    json.dump(cfg, f, ensure_ascii=False, indent=2)

# 打印（打码 token）
cfg_mask = json.loads(json.dumps(cfg))
cfg_mask['storage']['token'] = '***'
print(json.dumps(cfg_mask, ensure_ascii=False, indent=2))
PY

      # ====== 运行脚本（使用 SUBSCRIBE_CONF + -c，而非 --config）======
      - name: Process
        env:
          SUBSCRIBE_CONF: config.json   # 告诉脚本读取这份配置
        run: |
          set -eux
          python -u subscribe/process.py -c --overwrite

      # ====== 列出产物，辅助排错 ======
      - name: List outputs
        run: |
          set -eux
          ls -al
          [ -f clash.yaml ] && echo "Found clash.yaml in repo root" || echo "No clash.yaml in repo root"

      - name: Timestamp
        run: date
