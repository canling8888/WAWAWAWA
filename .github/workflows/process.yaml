name: Process
on:
  workflow_dispatch:
  schedule:
    - cron: "05 03 * * *"
    - cron: "05 11 * * *"

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      # 1) 自检：Secrets 存在
      - name: Validate secrets (non-empty)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
        run: |
          set -eux
          test -n "$GIST_LINK" || (echo "GIST_LINK is empty"; exit 1)
          test -n "$GIST_PAT"  || (echo "GIST_PAT is empty";  exit 1)

      # 2) 生成运行时 config.json 并注入 Gist 推送（支持 GIST_LINK=ID 或 URL）
      - name: Build runtime config.json (inject push->gist)
        env:
          GIST_LINK: ${{ secrets.GIST_LINK }}
          GIST_PAT:  ${{ secrets.GIST_PAT }}
        run: |
          set -eux
          test -f subscribe/config/config.default.json

          # 生成注入脚本（避免 here-doc 缩进/编码问题）
          cat > inject.py <<'PY'
import json, os, re, sys

# 读取默认配置
with open('subscribe/config/config.default.json','r',encoding='utf-8') as f:
    cfg = json.load(f)

# 解析 Gist ID：既支持 ID，也支持整条 URL
raw = os.environ['GIST_LINK'].strip()
if raw.startswith('http'):
    # 去掉末尾 '/', 取最后一段
    gid = raw.rstrip('/').split('/')[-1]
else:
    gid = raw

# 注入 storage -> gist；如果你的产物不在根目录，请改 filename
cfg.setdefault('storage', {})
cfg['storage']['engine']  = 'gist'
cfg['storage']['base']    = 'https://api.github.com'
cfg['storage']['domain']  = 'https://gist.github.com'
cfg['storage']['token']   = os.environ['GIST_PAT']
cfg['storage']['items']   = {
    "xxx-clash": {"id": gid, "filename": "clash.yaml"}
}

# 写回运行时配置
with open('config.json','w',encoding='utf-8') as f:
    json.dump(cfg, f, ensure_ascii=False, indent=2)

# 打印（打码 token）
cfg['storage']['token'] = '***'
print(json.dumps(cfg, ensure_ascii=False, indent=2))
PY

          python inject.py
          rm -f inject.py

      # 3) 跑脚本（脚本用 SUBSCRIBE_CONF 指向我们生成的 config.json）
      - name: Process
        env:
          SUBSCRIBE_CONF: config.json
        run: |
          set -eux
          python -u subscribe/process.py -c --overwrite

      # 4) 列出产物（看是否在根目录产出了 clash.yaml）
      - name: List outputs
        run: |
          set -eux
          ls -al
          [ -f clash.yaml ] && echo "Found clash.yaml in repo root" || echo "No clash.yaml in repo root"

      - name: Timestamp
        run: date
